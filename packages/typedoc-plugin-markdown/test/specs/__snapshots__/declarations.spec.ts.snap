// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Reflections: should compile a an udefined 1`] = `
"• \`Let\` **undefinedNumberDeclaration**: number

[partial: member.sources]
"
`;

exports[`Reflections: should compile a variable with default value 1`] = `
"• \`Const\` **stringWithDefaultValueDeclaration**: \\\\\\"variable\\\\\\" = \\"variable\\"

[partial: member.sources]
"
`;

exports[`Reflections: should compile object literal cast as a const 1`] = `
"• \`Const\` **objectLiteralAsConstDeclaration**: object = { Prop1: 'Prop1', Prop2: 'Prop1', Prop3: 'Prop1',} as const

[partial: member.sources]

#### Type declaration:

Name | Type | Description |
------ | ------ | ------ |
\`Prop1\` | \\\\\\"Prop1\\\\\\" | comments |
\`Prop2\` | \\\\\\"Prop1\\\\\\" | comments |
\`Prop3\` | \\\\\\"Prop1\\\\\\" | comments |
"
`;

exports[`Reflections: should compile object literal declaration 1`] = `
"▪ \`Const\` **objectLiteralDeclaration**: object

[partial: member.sources]

#### Properties:

Name | Type | Value | Description |
------ | ------ | ------ | ------ |
\`valueA\` | number | 100 | Comment for valueA |
\`valueB\` | boolean | true | - |
\`valueZ\` | string | \\"foo\\" | Comment for valueZ |
\`valueY\` | function | () => string | Comment for value Y |
\`valueX\` | object | { valueA: number[] = [100, 200, 300]; valueZ: string = \\"foo\\" } | Comment for valueX |
"
`;

exports[`Reflections: should compile type literal declaration 1`] = `
"• \`Let\` **typeLiteralDeclaration**: object

[partial: member.sources]

#### Type declaration:

Name | Type | Description |
------ | ------ | ------ |
\`valueA?\` | number | Comments for valueA |
\`valueB?\` | boolean | - |
\`valueX\` | { valueA: number[] ; valueY: (z: string) => { a: string ; b: string  } ; valueZ: string  } | Comment for valueX |
\`valueY\` | () => string | - |
\`valueZ\` | string | Comment for valueZ |
"
`;

exports[`Reflections: should declaration with double underscores in name and value 1`] = `
"• \`Const\` **\\\\_\\\\_DOUBLE\\\\_UNDERSCORES\\\\_DECLARATION\\\\_\\\\_**: unique symbol = Symbol.for('\\\\_\\\\_type\\\\_\\\\_')

[partial: member.sources]
"
`;
