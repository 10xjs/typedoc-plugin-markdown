// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Types: should compile 'array' type' 1`] = `
"string[]
"
`;

exports[`Types: should compile 'intersection' type' 1`] = `"[IntersectionClassA](_types_.intersectionclassa.md) & [IntersectionClassB](_types_.intersectionclassb.md)"`;

exports[`Types: should compile 'literal' type' 1`] = `"object"`;

exports[`Types: should compile 'objectLiteralType' type' 1`] = `"object"`;

exports[`Types: should compile 'stringLiteral' type' 1`] = `
"\\\\\\"blue\\\\\\"
"
`;

exports[`Types: should compile 'tuple' type' 1`] = `"[string, number]"`;

exports[`Types: should compile 'typeOperator' type ' 1`] = `"unique symbol"`;

exports[`Types: should compile 'union' of string literals types' 1`] = `
"\\\\\\"ease-in\\\\\\" \\\\| \\\\\\"ease-out\\\\\\" \\\\| \\\\\\"ease-in-out\\\\\\"
"
`;

exports[`Types: should compile expanded 'function' type ' 1`] = `"\\\\<T>(arg: T) => T"`;

exports[`Types: should compile expanded 'literal' type' 1`] = `"{ valueA?: number ; valueB?: boolean ; valueX: { valueA: number[] ; valueY: (z: string) => { a: string ; b: string  } ; valueZ: string  } ; valueY: () => string ; valueZ: string  }"`;

exports[`Types: should compile expanded 'objectLiteralType' type' 1`] = `
"{ 
: string = \\"foo\\"; <: string = \\"\\\\<foo>\\"; <foo>: string = \\"foo\\"; _: string = \\"foo\\"; \`: string = \\"foo\\"; valueA: number = 100; valueB: boolean = true; valueZ: string = \\"foo\\"; |: string = \\"foo\\"; ~: string = \\"foo\\"; valueY: () => string ; valueX: { valueA: number[] = [100, 200, 300]; valueZ: string = \\"foo\\"; valueY: (z: string) => { a: string = \\"test\\"; b: string = z }  }  }"
`;

exports[`Types: should compile intrinsic type' 1`] = `"string"`;

exports[`Types: should compile reflection 'function' type ' 1`] = `"function"`;

exports[`Types: should compile unionType with object literal type ' 1`] = `"string \\\\| { z: string  }"`;
